openapi: 3.1.0
info:
  title: Library API
  description: API for managing a library (books, authors and genres)
  version: 1.0.0

servers:
  - url: http://localhost:3000

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Books
    description: Book management endpoints
  - name: Authors
    description: Author management endpoints
  - name: Genres
    description: Genre management endpoints
  - name: Users
    description: User management endpoints

# Global security configuration
security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      security: []
      tags:
        - Authentication
      summary: Register a new user
      parameters:
        - name: username  
          in: query
          required: true
          schema:
            type: string
          description: Username for the new account
          example: "your_username"
        - name: password
          in: query
          required: true
          schema:
            type: string
            format: password
          description: Password for the new account
          example: "your_password"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid parameters
        '409':
          description: Username already exists
        '500':
          description: Server error

  /auth/login:
    post:
      security: []
      tags:
        - Authentication
      summary: Login to get JWT token
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          description: Your username
          example: "your_username"
        - name: password
          in: query
          required: true
          schema:
            type: string
            format: password
          description: Your password
          example: "your_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /books:
    get:
      tags:
        - Books
      summary: Get all books
      responses:
        '200':
          description: List of books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Server error

    post:
      tags:
        - Books
      summary: Create a new book
      description: |
        Create a new book using query parameters.
        First get an author ID from /authors endpoint and a genre ID from /genres endpoint.
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
          description: Title of the book
          example: "The Lord of the Rings"
        - name: authorId
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the existing author (must be a positive integer)
          example: 1
        - name: genreId
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: ID of the existing genre (must be a positive integer)
          example: 1
        - name: publishedYear
          in: query
          required: true
          schema:
            type: integer
          description: Publication year
          example: 1965
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid parameters
        '404':
          description: Author or genre not found
        '500':
          description: Server error

  /books/{isbn}:
    parameters:
      - name: isbn
        in: path
        required: true
        schema:
          type: integer
        description: ISBN of the book
    
    get:
      tags:
        - Books
      summary: Get a book by its ISBN
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
        '500':
          description: Server error

    put:
      tags:
        - Books
      summary: Update a book
      parameters:
        - name: isbn
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: ISBN of the book to update
        - name: title
          in: query
          schema:
            type: string
          description: New title for the book
          example: "Updated Title"
        - name: authorId
          in: query
          schema:
            type: integer
            minimum: 1
          description: ID of the new author
          example: 1
        - name: genreId
          in: query
          schema:
            type: integer
            minimum: 1
          description: ID of the new genre
          example: 1
        - name: publishedYear
          in: query
          schema:
            type: integer
            minimum: 1
          description: New publication year
          example: 1954
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid parameters
        '404':
          description: Book not found or Author/Genre not found
        '500':
          description: Server error

    delete:
      tags:
        - Books
      summary: Delete a book
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found
        '500':
          description: Server error

  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      responses:
        '200':
          description: List of authors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '500':
          description: Server error

    post:
      tags:
        - Authors
      summary: Create a new author
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: Name of the author
          example: "J.R.R. Tolkien"
        - name: birthdate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Author's birthdate (YYYY-MM-DD)
          example: "1892-01-03"
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '400':
          description: Invalid parameters
        '500':
          description: Server error

  /authors/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the author
    
    get:
      tags:
        - Authors
      summary: Get an author by ID
      responses:
        '200':
          description: Author found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
        '500':
          description: Server error

    put:
      tags:
        - Authors
      summary: Update an author
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          schema:
            type: string
          description: New name for the author
        - name: birthdate
          in: query
          schema:
            type: string
            format: date
          description: New birthdate (YYYY-MM-DD)
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
        '500':
          description: Server error

    delete:
      tags:
        - Authors
      summary: Delete an author
      responses:
        '204':
          description: Author deleted successfully
        '404':
          description: Author not found
        '500':
          description: Server error

  /genres:
    get:
      tags:
        - Genres
      summary: Get all genres
      responses:
        '200':
          description: List of genres retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '500':
          description: Server error

    post:
      tags:
        - Genres
      summary: Create a new genre
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: Name of the genre
          example: "Fantasy"
      responses:
        '201':
          description: Genre created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid parameters
        '500':
          description: Server error

  /genres/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: ID of the genre
    
    get:
      tags:
        - Genres
      summary: Get a genre by ID
      responses:
        '200':
          description: Genre found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: Genre not found
        '500':
          description: Server error

    put:
      tags:
        - Genres
      summary: Update a genre
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: New name for the genre
      responses:
        '200':
          description: Genre updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: Genre not found
        '500':
          description: Server error

    delete:
      tags:
        - Genres
      summary: Delete a genre
      responses:
        '204':
          description: Genre deleted successfully
        '404':
          description: Genre not found
        '500':
          description: Server error

  /users:
    get:
      tags:
        - Users
      summary: Get all users (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '403':
          description: Admin access required
        '500':
          description: Server error

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a user by ID (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user
      responses:
        '200':
          description: User found
        '403':
          description: Admin access required
        '404':
          description: User not found
        '500':
          description: Server error

    delete:
      tags:
        - Users
      summary: Delete a user (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Cannot delete admin account
        '403':
          description: Admin access required
        '500':
          description: Server error

# Components
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        username: { type: string }
        password: { type: string }

    UserCreate:
      type: object
      properties:
        username: { type: string }
        password: { type: string }

    UserLogin:
      type: object
      properties:
        username: { type: string }
        password: { type: string }
  
    UserResponse:
      type: object
      properties:
        id: 
          type: integer
          description: Unique ID of the user
        username: 
          type: string
          description: Username of the user

    Book:
      type: object
      properties:
        isbn:
          type: integer
          description: Unique ISBN of the book
        title:
          type: string
          description: Title of the book
        author:
          $ref: '#/components/schemas/Author'
          description: Author of the book
        genre:
          $ref: '#/components/schemas/Genre'
          description: Genre of the book
        published_year:
          type: integer
          description: Publication year
      required:
        - isbn
        - title
        - author
        - genre
        - published_year

    Author:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        birthdate: { type: string }

    Genre:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
